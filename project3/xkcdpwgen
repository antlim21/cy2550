#!/usr/bin/env python3 

import argparse
import sys
import random

parser = argparse.ArgumentParser()

selectable = None
capitalized = False
numbered = None
symbols = None
symbols_list = None
numbers_list = None

def parse_arg():
  

  for i in range(1, len(sys.argv), 2):
    option = sys.argv[i]
    value = sys.argv[i+1]

    if option in ["--words", "-w"]:
        selectable = int(value)

    elif option in ["--caps", "-c"]:
        capitalized = True

    elif option in ["--numbers", "-n"]:
        numbered = int(value)

    elif option in ["--symbols", "-s"]:
        symbols = int(value)


def help_function():
  print(help_message)

help_message = """
usage: xkcdpwgen [-h] [-w WORDS] [-c CAPS] [-n NUMBERS] [-s SYMBOLS]
                
Generate a secure, memorable password using the XKCD method
                
optional arguments:
    -h, --help            show this help message and exit
    -w WORDS, --words WORDS
                          include WORDS words in the password (default=4)
    -c CAPS, --caps CAPS  capitalize the first letter of CAPS random words
                          (default=0)
    -n NUMBERS, --numbers NUMBERS
                          insert NUMBERS random numbers in the password
                          (default=0)
    -s SYMBOLS, --symbols SYMBOLS
                          insert SYMBOLS random symbols in the password
                          (default=0)
"""

def yes_arg():
    wordlist = open("words.txt").read().splitlines()

    choose = 0
    if selectable == None: 
        choose = 4
    else:
        choose = selectable

    pick_x = random.sample(wordlist, choose)
    pick_x = [i.lower() for i in pick_x]

    if capitalized != None:
        pick_x = [i.title() for i in pick_x]

    pwd = ''.join(pick_x)

    if symbols != None:
        symbols_list = secretRandom.choices("~!@#$%^&*()_+`-=[]\{}|;:<>?,./", k = symbols)

    if numbered != None:
        numbers_list = [str(num) for num in secretRandom.choices(range(0, 10), k = numbered)]

    output_list = pwd + symbols_list + numbers_list

    print(output_list)

    

def no_arg():
    wordlist = open("words.txt").read().splitlines()

    pick_four = random.sample(wordlist, 4)

    pwd = ''.join(pick_four).lower()

    print(pwd)


def main():
  if "-h" in sys.argv or "--help" in sys.argv:
    help_function()
  elif len(sys.argv) > 1:
    parse_arg()
    yes_arg()
  else: 
    no_arg()

if __name__ == "__main__":
  main() 

