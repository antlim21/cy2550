#!/usr/bin/env python3

import argparse
import sys
import random

parser = argparse.ArgumentParser()

selectable = None
capitalized = False
numbered = None
symbols = None

def parse_arg():
    global selectable, capitalized, numbered, symbols
    parser.add_argument("-w", "--words", type=int, help="include WORDS words in the password (default=4)")
    parser.add_argument("-c", "--caps", type=int, help="capitalize the first letter of CAPS random words (default=0)")
    parser.add_argument("-n", "--numbers", type=int, help="insert NUMBERS random numbers in the password (default=0)")
    parser.add_argument("-s", "--symbols", type=int, help="insert SYMBOLS random symbols in the password (default=0)")
    args = parser.parse_args()

    if args.words:
        selectable = args.words

    if args.caps:
        capitalized = True

    if args.numbers:
        numbered = args.numbers

    if args.symbols:
        symbols = args.symbols

def help_function():
    print(help_message)

help_message = """
usage: xkcdpwgen [-h] [-w WORDS] [-c CAPS] [-n NUMBERS] [-s SYMBOLS]
                
Generate a secure, memorable password using the XKCD method
                
optional arguments:
    -h, --help            show this help message and exit
    -w WORDS, --words WORDS
                          include WORDS words in the password (default=4)
    -c CAPS, --caps CAPS  capitalize the first letter of CAPS random words
                          (default=0)
    -n NUMBERS, --numbers NUMBERS
                          insert NUMBERS random numbers in the password
                          (default=0)
    -s SYMBOLS, --symbols SYMBOLS
                          insert SYMBOLS random symbols in the password
                          (default=0)

"""

def yes_arg():
    wordlist = open("words.txt").read().splitlines()

    choose = 0
    if selectable is None: 
        choose = 4
    else:
        choose = selectable

    pick_x = random.sample(wordlist, choose)
    pick_x = [i.lower() for i in pick_x]

    if capitalized:
        pick_x = [i.title() for i in pick_x]

    symbols_list = []
    if symbols is not None:
        symbols_list = random.choices("~!@#$%^&*()_+`-=[]\{}|;:<>?,./", k=symbols)

    numbers_list = []
    if numbered is not None:
        numbers_list = [str(num) for num in random.choices(range(0, 10), k=numbered)]

    output_list = pick_x + symbols_list + numbers_list
    random.shuffle(output_list)

    pwd = ''.join(output_list)

    print(pwd)

def no_arg():
    wordlist = open("words.txt").read().splitlines()

    pick_four = random.sample(wordlist, 4)

    pwd = ''.join(pick_four).lower()

    print(pwd)

def main():
    if "-h" in sys.argv or "--help" in sys.argv:
        help_function()
    elif len(sys.argv) > 1:
        parse_arg()
        yes_arg()
    else: 
        no_arg()

if __name__ == "__main__":
    main()
